import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { ArrowLeft, RefreshCw, ExternalLink, Home } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { toast } from '@/hooks/use-toast';
import { Link } from 'react-router-dom';

const Preview = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [url, setUrl] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(true);
  const [imageData, setImageData] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const websiteUrl = searchParams.get('url');

    if (!websiteUrl) {
      setError('No URL provided');
      setLoading(false);
      return;
    }

    setUrl(websiteUrl);
    fetchPreview(websiteUrl);
  }, [location.search]);

  const fetchPreview = async (websiteUrl: string) => {
    setLoading(true);
    setError(null);

    try {
      let normalizedUrl = websiteUrl;
      if (!normalizedUrl.startsWith('http://') && !normalizedUrl.startsWith('https://')) {
        normalizedUrl = 'https://' + normalizedUrl;
      }

      const response = await simulatePreviewFetch(normalizedUrl);
      
      if (response.error) {
        throw new Error(response.error);
      }
      
      setImageData(response.preview);
    } catch (err) {
      console.error('Error fetching preview:', err);
      setError(err instanceof Error ? err.message : 'Failed to generate preview');
      toast({
        title: "Preview Error",
        description: "Failed to generate website preview",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const simulatePreviewFetch = async (url: string): Promise<{preview?: string, error?: string}> => {
    return new Promise((resolve) => {
      setTimeout(() => {
        if (url.includes('error')) {
          resolve({ error: 'Failed to generate preview for this website' });
        } else {
          // Generate a proper preview using a screenshot service or placeholder
          const canvas = document.createElement('canvas');
          canvas.width = 1200;
          canvas.height = 630;
          const ctx = canvas.getContext('2d');
          
          if (ctx) {
            // Create a modern gradient background
            const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);
            gradient.addColorStop(0, '#667eea');
            gradient.addColorStop(0.5, '#764ba2');
            gradient.addColorStop(1, '#f093fb');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Add a subtle overlay pattern
            ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
            for (let i = 0; i < canvas.width; i += 40) {
              for (let j = 0; j < canvas.height; j += 40) {
                ctx.fillRect(i, j, 20, 20);
              }
            }
            
            // Add border and shadow effect
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
            ctx.lineWidth = 4;
            ctx.strokeRect(20, 20, canvas.width - 40, canvas.height - 40);
            
            // Add main title
            ctx.fillStyle = 'white';
            ctx.font = 'bold 52px Arial, sans-serif';
            ctx.textAlign = 'center';
            ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
            ctx.shadowBlur = 10;
            ctx.fillText('Website Preview', canvas.width / 2, canvas.height / 2 - 80);
            
            // Add URL
            ctx.font = '28px Arial, sans-serif';
            ctx.shadowBlur = 5;
            const displayUrl = url.length > 40 ? url.substring(0, 37) + '...' : url;
            ctx.fillText(displayUrl, canvas.width / 2, canvas.height / 2 - 10);
            
            // Add status indicator
            ctx.font = '20px Arial, sans-serif';
            ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
            ctx.shadowBlur = 3;
            ctx.fillText('âœ“ Site Analysis Complete', canvas.width / 2, canvas.height / 2 + 40);
            
            // Add branding
            ctx.font = '18px Arial, sans-serif';
            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
            ctx.shadowBlur = 2;
            ctx.fillText('Generated by MvpPeek AI', canvas.width / 2, canvas.height / 2 + 100);
            
            // Add timestamp
            ctx.font = '14px Arial, sans-serif';
            ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
            const timestamp = new Date().toLocaleString();
            ctx.fillText(`Generated: ${timestamp}`, canvas.width / 2, canvas.height / 2 + 130);
            
            // Reset shadow for clean output
            ctx.shadowBlur = 0;
            
            const preview = canvas.toDataURL('image/png').split(',')[1];
            resolve({ preview });
          } else {
            resolve({ error: 'Failed to generate preview - Canvas not supported' });
          }
        }
      }, 1500);
    });
  };

  const handleRefresh = () => {
    if (url) {
      fetchPreview(url);
    }
  };

  const handleGoBack = () => {
    navigate(-1);
  };

  const handleGoHome = () => {
    navigate('/');
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <Card className="w-full overflow-hidden">
        <CardHeader className="bg-gray-100 p-2 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Button 
                variant="ghost" 
                size="icon" 
                onClick={handleGoBack} 
                title="Go back"
              >
                <ArrowLeft size={16} />
              </Button>
              <Link to="/">
                <Button 
                  variant="ghost" 
                  size="icon" 
                  title="Home"
                >
                  <Home size={16} />
                </Button>
              </Link>
              <Button 
                variant="ghost" 
                size="icon" 
                onClick={handleRefresh} 
                title="Refresh"
                disabled={loading}
              >
                <RefreshCw size={16} className={loading ? "animate-spin" : ""} />
              </Button>
            </div>
            <div className="flex-1 px-4">
              <div className="bg-white border border-gray-300 rounded-md px-3 py-1.5 text-sm text-gray-600 truncate max-w-full">
                {url || 'No URL'}
              </div>
            </div>
            <div>
              <Button 
                variant="ghost" 
                size="sm"
                onClick={() => window.open(url.startsWith('http') ? url : `https://${url}`, '_blank')}
                className="flex items-center gap-1 text-gray-600 text-xs"
              >
                <ExternalLink size={14} />
                Open
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-0">
          {loading ? (
            <div className="flex flex-col items-center justify-center py-16 bg-gray-50">
              <div className="w-12 h-12 border-4 border-gray-200 border-t-blue-500 rounded-full animate-spin"></div>
              <p className="mt-4 text-sm text-gray-600">Generating website preview...</p>
            </div>
          ) : error ? (
            <div className="flex flex-col items-center justify-center py-16 bg-gray-50">
              <div className="text-red-500 mb-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="15" y1="9" x2="9" y2="15"></line>
                  <line x1="9" y1="9" x2="15" y2="15"></line>
                </svg>
              </div>
              <p className="text-gray-800 font-medium">Failed to load preview</p>
              <p className="mt-2 text-sm text-gray-600">{error}</p>
            </div>
          ) : imageData ? (
            <div className="w-full">
              <img 
                src={`data:image/png;base64,${imageData}`}
                alt="Website Preview" 
                className="w-full h-auto"
              />
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center py-16 bg-gray-50">
              <p className="text-gray-800 font-medium">No preview available</p>
              <p className="mt-2 text-sm text-gray-600">Enter a URL to generate a preview</p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default Preview;
